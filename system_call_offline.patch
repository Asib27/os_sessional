diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..2430842
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,12 @@
+{
+    "files.associations": {
+        "types.h": "c",
+        "defs.h": "c",
+        "proc.h": "c",
+        "spinlock.h": "c",
+        "memlayout.h": "c",
+        "param.h": "c",
+        "riscv.h": "c",
+        "user.h": "c"
+    }
+}
\ No newline at end of file
diff --git a/Makefile b/Makefile
index 39a99d7..57cd232 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,9 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_trace\
+	$U/_history\
+	$U/_shutdown\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..afbd54d 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -9,6 +9,9 @@ struct sleeplock;
 struct stat;
 struct superblock;
 
+// start.c
+void            shutdown_helper();
+
 // bio.c
 void            binit(void);
 struct buf*     bread(uint, uint);
@@ -140,6 +143,10 @@ void            argaddr(int, uint64 *);
 int             fetchstr(uint64, char*, int);
 int             fetchaddr(uint64, uint64*);
 void            syscall();
+int             no_of_syscalls(void);
+extern          int syscall_count[];
+extern          int syscall_ticks[];
+extern          char* syscall_name[];
 
 // trap.c
 extern uint     ticks;
diff --git a/kernel/kernelvec.S b/kernel/kernelvec.S
index fb31b32..fec8e17 100644
--- a/kernel/kernelvec.S
+++ b/kernel/kernelvec.S
@@ -103,6 +103,9 @@ timervec:
         sd a2, 8(a0)
         sd a3, 16(a0)
 
+        ld a1, 40(a0)
+        bne a1, zero, shutdown
+
         # schedule the next timer interrupt
         # by adding interval to mtimecmp.
         ld a1, 24(a0) # CLINT_MTIMECMP(hart)
@@ -122,3 +125,10 @@ timervec:
         csrrw a0, mscratch, a0
 
         mret
+        
+        shutdown:
+        lui a1, 0x100
+        lui a2, 0x5
+        addi a2, a2, 0x555
+        sw a2, 0(a1)
+        
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..75b1621 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -124,6 +124,7 @@ allocproc(void)
 found:
   p->pid = allocpid();
   p->state = USED;
+  p->trace_call = -1;
 
   // Allocate a trapframe page.
   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
@@ -169,6 +170,7 @@ freeproc(struct proc *p)
   p->killed = 0;
   p->xstate = 0;
   p->state = UNUSED;
+  p->trace_call = -1;
 }
 
 // Create a user page table for a given process, with no user memory,
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..8086774 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,7 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  // for tracing
+  int trace_call;
 };
diff --git a/kernel/start.c b/kernel/start.c
index e16f18a..78893a6 100644
--- a/kernel/start.c
+++ b/kernel/start.c
@@ -11,7 +11,7 @@ void timerinit();
 __attribute__ ((aligned (16))) char stack0[4096 * NCPU];
 
 // a scratch area per CPU for machine-mode timer interrupts.
-uint64 timer_scratch[NCPU][5];
+uint64 timer_scratch[NCPU][6];
 
 // assembly code in kernelvec.S for machine-mode timer interrupt.
 extern void timervec();
@@ -76,6 +76,7 @@ timerinit()
   uint64 *scratch = &timer_scratch[id][0];
   scratch[3] = CLINT_MTIMECMP(id);
   scratch[4] = interval;
+  scratch[5] = 0;
   w_mscratch((uint64)scratch);
 
   // set the machine-mode trap handler.
@@ -87,3 +88,8 @@ timerinit()
   // enable machine-mode timer interrupts.
   w_mie(r_mie() | MIE_MTIE);
 }
+
+void shutdown_helper(){
+  uint64 *scratch = &timer_scratch[0][0];
+  scratch[5] = 1;
+}
\ No newline at end of file
diff --git a/kernel/stat.h b/kernel/stat.h
index 19543af..48c1b07 100644
--- a/kernel/stat.h
+++ b/kernel/stat.h
@@ -9,3 +9,9 @@ struct stat {
   short nlink; // Number of links to file
   uint64 size; // Size of file in bytes
 };
+
+struct syscall_stat{
+  char syscall_name[16];
+  int count;
+  int accum_time;
+};
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..5923c5a 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -7,6 +7,13 @@
 #include "syscall.h"
 #include "defs.h"
 
+int printarg = 0;
+int args[7] = {0};
+int last_arg = 0;
+int argsintsbuf[7] = {0};
+uint64 argsaddrsbuf[7] = {0};
+char argstrbuf[200][7];
+
 // Fetch the uint64 at addr from the current process.
 int
 fetchaddr(uint64 addr, uint64 *ip)
@@ -57,6 +64,13 @@ void
 argint(int n, int *ip)
 {
   *ip = argraw(n);
+  if (printarg)
+  {
+    args[n] = 0;
+    last_arg = last_arg > n? last_arg:n;
+    argsintsbuf[n] = *ip;
+  }
+  
 }
 
 // Retrieve an argument as a pointer.
@@ -66,6 +80,11 @@ void
 argaddr(int n, uint64 *ip)
 {
   *ip = argraw(n);
+  if(printarg){
+    args[n] = 1;
+    last_arg = last_arg > n? last_arg:n;
+    argsaddrsbuf[n] = *ip;
+  }
 }
 
 // Fetch the nth word-sized system call argument as a null-terminated string.
@@ -75,8 +94,21 @@ int
 argstr(int n, char *buf, int max)
 {
   uint64 addr;
+
+  int t1 = printarg;
+  printarg = 0;
   argaddr(n, &addr);
-  return fetchstr(addr, buf, max);
+  printarg = t1;
+
+  int len =  fetchstr(addr, buf, max);
+
+  if(printarg){
+    args[n] = 2;
+    last_arg = last_arg > n? last_arg:n;
+    fetchstr(addr, argstrbuf[n], 200);
+  }
+
+  return len;
 }
 
 // Prototypes for the functions that handle system calls.
@@ -101,6 +133,9 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_trace(void);
+extern uint64 sys_history(void);
+extern uint64 sys_shutdown(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,8 +161,46 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_trace]   sys_trace,
+[SYS_history]   sys_history,
+[SYS_shutdown] sys_shutdown,
 };
 
+char *syscall_name[] = {
+[SYS_fork]    "fork",
+[SYS_exit]    "exit",
+[SYS_wait]    "wait",
+[SYS_pipe]    "pipe",
+[SYS_read]    "read",
+[SYS_kill]    "kill",
+[SYS_exec]    "exec",
+[SYS_fstat]   "fstat",
+[SYS_chdir]   "chdir",
+[SYS_dup]     "dup",
+[SYS_getpid]  "getpid",
+[SYS_sbrk]    "sbrk",
+[SYS_sleep]   "sleep",
+[SYS_uptime]  "uptime",
+[SYS_open]    "open",
+[SYS_write]   "write",
+[SYS_mknod]   "mknod",
+[SYS_unlink]  "unlink",
+[SYS_link]    "link",
+[SYS_mkdir]   "mkdir",
+[SYS_close]   "close",
+[SYS_trace]   "trace",
+[SYS_history]   "history",
+[SYS_shutdown] "shutdown"
+};
+
+int syscall_count[NELEM(syscalls)] = {0};
+int syscall_ticks[NELEM(syscalls)] = {0};
+
+
+int no_of_syscalls(void){
+  return NELEM(syscalls);
+}
+
 void
 syscall(void)
 {
@@ -137,8 +210,42 @@ syscall(void)
   num = p->trapframe->a7;
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
     // Use num to lookup the system call function for num, call it,
+    if(p->trace_call == num){
+      printarg = 1;
+    }
+
+    int cnt1 = ticks;
     // and store its return value in p->trapframe->a0
     p->trapframe->a0 = syscalls[num]();
+    int cnt2 = ticks;
+
+    if(printarg){
+      printarg = 0;
+      printf("pid:%d, syscall: %s, args: (", p->pid ,syscall_name[num] );
+
+      for(int i = 0;i <= last_arg; i++){
+        if(args[i] == 0){
+          printf("%d", argsintsbuf[i]);
+        }
+        else if(args[i] == 1){
+          printf("%p", argsaddrsbuf[i]);
+        }
+        else if(args[i] == 2){
+          printf("%s", argstrbuf[i]);
+        }
+
+        if(i != last_arg) printf(", ");
+      }
+
+      printf("), return: %d\n", p->trapframe->a0);
+      last_arg = 0;
+    }
+
+    acquire(&tickslock);
+    syscall_count[num]++;
+    syscall_ticks[num] += cnt2 - cnt1;
+    release(&tickslock);
+
   } else {
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..1b3207f 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,6 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_trace  22
+#define SYS_history 23
+#define SYS_shutdown 24
\ No newline at end of file
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..cd352e0 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -5,6 +5,7 @@
 #include "memlayout.h"
 #include "spinlock.h"
 #include "proc.h"
+#include "stat.h"
 
 uint64
 sys_exit(void)
@@ -89,3 +90,46 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64 sys_trace(void){
+  int syscall_id;
+  argint(0, &syscall_id);
+
+  myproc()->trace_call = syscall_id;
+  return 0;
+}
+
+uint64 sys_history(void){
+  int syscall_id;
+  uint64 addr;
+
+  argint(0, &syscall_id);
+  argaddr(1, &addr);
+
+  if(syscall_id >= no_of_syscalls()){
+    return 1;
+  }
+
+  // printf("%d %p\n", syscall_id, addr);
+
+  struct syscall_stat st;
+  int i = 0;
+  for(i = 0; syscall_name[syscall_id][i] != '\0'; i++){
+    st.syscall_name[i] = syscall_name[syscall_id][i];
+  }
+  st.syscall_name[i] = '\0';
+  st.count = syscall_count[syscall_id];
+  st.accum_time = syscall_ticks[syscall_id];
+
+  struct proc *p = myproc();
+
+  // printf("%d : count %d, time %d\n", syscall_id, syscall_count[syscall_id], syscall_ticks[syscall_id]);
+  if(copyout(p->pagetable, addr, (char *)&st, sizeof(st)) < 0)
+    return 2;
+  return 0;
+}
+
+uint64 sys_shutdown(void){
+  shutdown_helper();
+  return 0;
+}
diff --git a/user/history.c b/user/history.c
new file mode 100644
index 0000000..7c3d751
--- /dev/null
+++ b/user/history.c
@@ -0,0 +1,31 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+    if(argc == 2){
+        struct syscall_stat st;
+        if(history(atoi(argv[1]), &st) != 0){
+            printf("Invalid system call number\n");
+            return 1;
+        }
+
+        printf("%d:\tsyscall: %s, #: %d, time: %d\n", atoi(argv[1]), st.syscall_name, st.count, st.accum_time);
+    }
+
+    else if(argc == 1){
+        struct syscall_stat st;
+        for(int i = 1; i <= SYSCALL_NUM; i++ ){
+            history(i, &st);
+            printf("%d:\tsyscall: %s, #: %d, time: %d\n", i, st.syscall_name, st.count, st.accum_time);
+        }
+    }
+    else{
+        printf("USAGE : history syscall_numer");
+    }
+
+    return 0;
+}
\ No newline at end of file
diff --git a/user/shutdown.c b/user/shutdown.c
new file mode 100644
index 0000000..70b34ed
--- /dev/null
+++ b/user/shutdown.c
@@ -0,0 +1,9 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int main(){
+    shutdown();
+    return 0;
+}
\ No newline at end of file
diff --git a/user/trace.c b/user/trace.c
new file mode 100644
index 0000000..923d7ed
--- /dev/null
+++ b/user/trace.c
@@ -0,0 +1,27 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+  int i;
+  char *nargv[MAXARG];
+
+  if(argc < 3 || (argv[1][0] < '0' || argv[1][0] > '9')){
+    fprintf(2, "Usage: %s sys_call_num command\n", argv[0]);
+    exit(1);
+  }
+
+  if (trace(atoi(argv[1])) < 0) {
+    fprintf(2, "%s: trace failed\n", argv[0]);
+    exit(1);
+  }
+  
+  for(i = 2; i < argc && i < MAXARG; i++){
+    nargv[i-2] = argv[i];
+  }
+  exec(nargv[0], nargv);
+  exit(0);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..1d99c7c 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,5 +1,7 @@
 struct stat;
+struct syscall_stat;
 
+#define SYSCALL_NUM 24
 // system calls
 int fork(void);
 int exit(int) __attribute__((noreturn));
@@ -22,6 +24,9 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int trace(int);
+int history(int syscall, struct syscall_stat*);
+int shutdown(void );
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..8087867 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,6 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("trace");
+entry("history");
+entry("shutdown");
\ No newline at end of file
